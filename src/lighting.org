#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#lighting-calculations][Lighting calculations]]
     - [[#lambert][Lambert]]
     - [[#phong][Phong]]
     - [[#beckmann-distribution][Beckmann Distribution]]
     - [[#schlick-approximation][Schlick approximation]]
     - [[#cook-torrance][Cook-Torrance]]
         - [[#example][Example]]
     - [[#skylight][Skylight]]
     - [[#spotlight][Spotlight]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Lighting calculations

** Lambert

#+BEGIN_SRC glsl :noweb-ref lambert
  float lambert(vec3 surfaceNormal, vec3 lightDirection) {
    return min(max(dot(surfaceNormal, lightDirection), 0.0), 1.0);
  }
#+END_SRC

** Phong

#+BEGIN_SRC glsl :noweb-ref phong
  float phong(vec3 lightDir, vec3 eyeDir, vec3 surfaceNormal) {
    return dot(reflect(-lightDir, surfaceNormal), eyeDir);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref blinn-phong
  float blinnPhong(vec3 lightDir, vec3 eyeDir, vec3 surfaceNormal) {
    return dot(normalize(lightDir + eyeDir), surfaceNormal);
  }
#+END_SRC

** Beckmann Distribution

#+BEGIN_SRC glsl :noweb-ref beckmann-dist
  float beckmannDistribution(float x, float roughness) {
    float NdotH = max(x, 1e-4);
    float cos2Alpha = NdotH * NdotH;
    float tan2Alpha = (cos2Alpha - 1.0) / cos2Alpha;
    float roughness2 = roughness * roughness;
    float denom = PI * roughness2 * cos2Alpha * cos2Alpha;
    return exp(tan2Alpha / roughness2) / denom;
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref beckmann-specular
  float beckmannSpecular(vec3 lightDirection,
                         vec3 viewDirection,
                         vec3 surfaceNormal,
                         float roughness) {
    return beckmannDistribution(dot(surfaceNormal, normalize(lightDirection + viewDirection)), roughness);
  }
#+END_SRC

** Schlick approximation

#+BEGIN_SRC glsl :noweb-ref schlick
  float schlick(float r0, float smooth, vec3 normal, vec3 view) {
    float d = min(max(1.0f - dot(normal, -view), 0.0f), 1.0f);
    float d2 = d * d;
    return mix(r0, 1.0, smooth * d2 * d2 * d);
  }
#+END_SRC

** Cook-Torrance

#+BEGIN_SRC glsl :noweb-ref cook-torrance
  float cookTorranceSpecular(vec3 lightDirection,
                             vec3 viewDirection,
                             vec3 surfaceNormal,
                             float roughness,
                             float fresnel) {

    float VdotN = max(dot(viewDirection, surfaceNormal), 0.0);
    float LdotN = max(dot(lightDirection, surfaceNormal), 0.0);

    //Half angle vector
    vec3 H = normalize(lightDirection + viewDirection);

    //Geometric term
    float NdotH = max(dot(surfaceNormal, H), 0.0);
    float VdotH = max(dot(viewDirection, H), 1e-6);
    float LdotH = max(dot(lightDirection, H), 1e-6);
    float G1 = (2.0 * NdotH * VdotN) / VdotH;
    float G2 = (2.0 * NdotH * LdotN) / LdotH;
    float G = min(1.0, min(G1, G2));

    //Distribution term
    float D = beckmannDistribution(NdotH, roughness);

    //Fresnel term
    float F = pow(1.0 - VdotN, fresnel);

    //Multiply terms and done
    return G * F * D / max(PI * VdotN, 1e-6);
  }
#+END_SRC

*** Example

#+BEGIN_SRC glsl
  //Light and view geometry
  vec3 viewDirection = normalize(eyePosition - surfacePosition);
  vec3 lightDirection = normalize(lightPosition - surfacePosition);

  //Surface properties
  vec3 normal = normalize(surfaceNormal);

  //Compute specular power
  float power = cookTorranceSpecular(lightDirection,
                                     viewDirection,
                                     normal,
                                     roughness,
                                     fresnel);

  gl_FragColor = vec4(vec3(power), 1.0);
#+END_SRC

** Skylight

#+BEGIN_SRC glsl :noweb-ref skylight
  float skylight(float height){
    return smoothstep(0.0, PI, PI-acos(height));
  }

  vec3 skyLightColor(vec3 col1, vec3 col2, float height) {
    return mix(col1, col2, skylight(height));
  }
#+END_SRC

** Spotlight

#+BEGIN_SRC glsl :noweb-ref spotlight-att
  float attenuation(vec3 dir, float amp){
    float dist = length(dir);
    float radiance = 1.0 / (1.0 + pow(dist / amp, 2.0));
    return clamp(radiance * amp, 0.0, 1.0);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref spotlight-influence
  float influence(vec3 normal, float coneAngle, float fallOffAngle){
    float minConeAngle = (360.0 - coneAngle - fallOffAngle) * RAD;
    float maxConeAngle = (360.0 - coneAngle) * RAD;
    return smoothstep(minConeAngle, maxConeAngle, acos(normal.z));
  }
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :noweb yes :tangle ../babel/src/thi/ng/glsl/lighting.cljs :mkdirp yes :padline no
  (ns thi.ng.glsl.lighting
    (:require-macros [thi.ng.glsl.core :refer [minified]]))

  (def lambert
    {:src (minified "
      <<lambert>>")})

  (def phong
    {:src (minified "
    <<phong>>")})

  (def blinn-phong
    {:src (minified "
    <<blinn-phong>>")})

  (def schlick
    {:src (minified "
      <<schlick>>")})

  (def beckmann-distribution
    {:src (minified "
    <<beckmann-dist>>")})

  (def beckmann-specular
    {:src (minified "
    <<beckmann-specular>>")})

  (def cook-torrance
    {:deps [beckmann-distribution]
     :src (minified "
      <<cook-torrance>>")})

  (def skylight
    {:src (minified "
      <<skylight>>")})

  (def spotlight-attenuation
    {:src (minified "
      <<spotlight-att>>")})

  (def spotlight-influence
    {:src (minified "
      <<spotlight-influence>>")})
#+END_SRC
