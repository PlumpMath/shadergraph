#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#vertices--normals][Vertices & normals]]
     - [[#standard-mvp][Standard MVP]]
     - [[#standard-surface-normal][Standard surface normal]]
     - [[#rotations][Rotations]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Vertices & normals
** Standard MVP

#+BEGIN_SRC glsl :noweb-ref vertex-mvp
  vec4 mvp(vec3 pos, mat4 model, mat4 view, mat4 proj) {
    return proj * view * model * vec4(pos, 1.0);
  }
#+END_SRC

** Standard surface normal

#+BEGIN_SRC glsl :noweb-ref normal
  vec3 surfaceNormal(vec3 normal, mat4 normalMat) {
    return normalize((normalMat * vec4(normal, 0.0)).xyz);
  }
#+END_SRC

** Rotations

#+BEGIN_SRC glsl :noweb-ref rot-x
  vec3 rotateX(vec3 p, float theta) {
    float s = sin(theta);
    float c = cos(theta);
    return vec3(p.x, p.y * c - p.z * s, p.z * c + p.y * s);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref rot-y
  vec3 rotateY(vec3 p, float theta) {
    float s = sin(theta);
    float c = cos(theta);
    return vec3(p.x * c + p.z * s, p.y, p.z * c - p.x * s);
  }
#+END_SRC

#+BEGIN_SRC glsl :noweb-ref rot-z
  vec3 rotateZ(vec3 p, float theta) {
    float s = sin(theta);
    float c = cos(theta);
    return vec3(p.x * c - p.y * s, p.y * c + p.x * s, p.z);
  }
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :noweb yes :tangle ../babel/src/thi/ng/glsl/vertex.cljs :mkdirp yes :padline no
  (ns thi.ng.glsl.vertex
    (:require-macros
     [thi.ng.glsl.core :refer [defglsl]]))

  (defglsl mvp
    nil "
  <<vertex-mvp>>")

  (defglsl surface-normal
    nil "
  <<normal>>")

  (defglsl rotate-x
    nil "
  <<rot-x>>")

  (defglsl rotate-y
    nil "
  <<rot-y>>")

  (defglsl rotate-z
    nil "
  <<rot-z>>")
#+END_SRC
