#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#shape-primitives][Shape primitives]]
     - [[#plane][Plane]]
     - [[#sphere][Sphere]]
     - [[#aabb][AABB]]
     - [[#torus][Torus]]
     - [[#cylinder][Cylinder]]
     - [[#capsule][Capsule]]
 - [[#shape-operations][Shape operations]]
     - [[#subtraction][Subtraction]]
     - [[#union][Union]]
     - [[#blending][Blending]]
 - [[#complete-namespace-definition][Complete namespace definition]]

* Shape primitives
** Plane

#+BEGIN_SRC glsl :noweb-ref plane
  float sdPlane(vec3 p, vec3 n, float w) {
    return dot(n, p) + w;
  }

  float sdPlane(vec3 p, vec3 pp, vec3 n) {
    return dot(n, p) - dot(n, pp);
  }
#+END_SRC

** Sphere

#+BEGIN_SRC glsl :noweb-ref sphere
  float sdSphere(vec3 p, float radius) {
    return length(p) - radius;
  }
#+END_SRC

** AABB

#+BEGIN_SRC glsl :noweb-ref aabb
  float sdAABB(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));
  }
#+END_SRC

** Torus

#+BEGIN_SRC glsl :noweb-ref torus
  float sdTorus(vec3 p, float r1, float r2) {
    return length(vec2(length(p.xz) - r2, p.y)) - r1;
  }
#+END_SRC

** Cylinder

#+BEGIN_SRC glsl :noweb-ref cylinder
  float sdCylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(h, r);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
  }
#+END_SRC

** Capsule

#+BEGIN_SRC glsl :noweb-ref capsule
  float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
  }
#+END_SRC

* Shape operations
** Subtraction

#+BEGIN_SRC glsl :noweb-ref op-sub
  float sdOpSub(float d1, float d2) {
    return max(-d2, d1);
  }
#+END_SRC

** Union

#+BEGIN_SRC glsl :noweb-ref op-union
  float sdOpUnion(float d1, float d2) {
    return min(d1, d2);
  }
#+END_SRC

** Blending

#+BEGIN_SRC glsl :noweb-ref op-blend
  float sdOpBlend(float a, float b, float f) {
    float h = clamp(0.5 + 0.5 * (b - a) / f, 0.0, 1.0);
    return mix(b, a, h) - f * h * (1.0 - h);
  }
#+END_SRC

* Complete namespace definition

#+BEGIN_SRC clojure :noweb yes :tangle ../babel/src/thi/ng/glsl/distancefields.cljc :mkdirp yes :padline no
  (ns thi.ng.glsl.distancefields
    (:require
     [thi.ng.glsl.core :as glsl :include-macros true]))

  (glsl/defglsl sd-plane
    nil "
    <<plane>>")

  (glsl/defglsl sd-sphere
    nil "
    <<sphere>>")

  (glsl/defglsl sd-aabb
    nil "
    <<aabb>>")

  (glsl/defglsl sd-torus
    nil "
    <<torus>>")

  (glsl/defglsl sd-cylinder
    nil "
    <<cylinder>>")

  (glsl/defglsl sd-capsule
    nil "
    <<capsule>>")

  (glsl/defglsl sd-op-sub
    nil "
    <<op-sub>>")

  (glsl/defglsl sd-op-union
    nil "
    <<op-union>>")

  (glsl/defglsl sd-op-blend
    nil "
    <<op-blend>>")
#+END_SRC
