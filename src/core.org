#+SETUPFILE: setup.org

* Contents                                                         :toc_4_gh:
 - [[#glsl-dependency-resolution][GLSL dependency resolution]]
     - [[#core-namespace-definition][Core namespace definition]]
 - [[#glsl-minifier][GLSL minifier]]
 - [[#macro-definitions][Macro definitions]]

* GLSL dependency resolution

All shader functions in this library are defined via simple maps
stored in vars, each grouping source code and dependencies to other
GLSL functions/snippets. The example spec below defines a new function
with two dependencies.

*Note:*

1. Since GLSL snippets are stored in normal ClojureScript vars,
   namespaces of dependent GLSL snippets need to be =required= as
   usual.
2. It's recommended, though optional, to use the =defglsl=,
   =glsl-spec= or =minified= macros for these GLSL source snippets to
   reduce boilerplate & final JS file size (see macro section below
   for more details).
3. This library is written using Emacs ORG-mode and all GLSL snippets
   here are defined using their own code blocks, which makes development easier.

#+BEGIN_SRC clojure
  (ns example
    (:require
     [thi.ng.glsl.core :include-macros true :refer-macros [defglsl minified]]
     [other.namespace :as other]
     [another.namespace :as another]))

  (defglsl my-spec
    [other/spec another/spec]
    "vec3 myFunc(vec3 a, vec3 b) {
       return ...;
     }")

  ;; alternatively the same spec *without* using the defglsl macro...

  (def my-spec
    (glsl/glsl-spec-plain
     [other/spec another/spec]
     "vec3 myFunc(vec3 a, vec3 b) {
        return ...;
     }"))

  ;; ...or...

  (def my-spec
    {:deps [other/spec another/spec]
     :src  "vec3 myFunc(vec3 a, vec3 b) {
               return ...;
            }"})
#+END_SRC

In order to correctly concatenate the various shader source snippets,
a dependency graph is computed during assembly using Stuart Sierra's
[[https://github.com/stuartsierra/dependency][dependency library]]. The =assemble= function below receives a spec and
returns an expanded GLSL source string with all dependencies in the
correct order. Note that cyclic dependencies are not supported.

#+BEGIN_SRC clojure :noweb-ref deps
  (defn- build-graph
    ([spec] (build-graph (dep/graph) spec))
    ([g curr]
       (reduce
        (fn [g d] (build-graph (dep/depend g curr d) d))
        g (:deps curr))))

  (defn assemble
    [spec]
    (if (seq (:deps spec))
      (->> spec
           (build-graph)
           (dep/topo-sort)
           (mapv :src)
           (apply str))
      (:src spec)))

  (defn glsl-spec-plain
    [deps src] {:deps deps :src src})
#+END_SRC

** Core namespace definition

#+BEGIN_SRC clojure :noweb yes :tangle ../babel/src/thi/ng/glsl/core.cljs :mkdirp yes :padline no
  (ns thi.ng.glsl.core
    (:require
     [clojure.string :as str]
     [com.stuartsierra.dependency :as dep]))

  <<minify>>

  <<deps>>
#+END_SRC

* GLSL minifier

So far the minifier only performs the following operations:

- comment removal (both single & multi line)
- whitespace removal

#+BEGIN_SRC clojure :noweb-ref minify
  (defn- minify-line
    [src]
    (let [src (-> src
                  (str/replace #"\s{2,}|\t" "")
                  (str/replace #"\s*(\{|\}|\=|\*|\,|\+|/|\>|\<|\&|\||\[|\]|\(|\)|\-|\!|\;)\s*" "$1"))]
      (if (= \# (first src))
        (str "\n" src "\n")
        src)))

  (defn- clean-line-breaks
    [src] (str/replace src #"\n{2,}" "\n"))

  (defn minify
    [src]
    (let [src (-> src
                  (str/replace #"//.*" "")
                  (str/replace #"/\*[\s\S]*?\*/" "")
                  (str/replace #"^\n+" ""))]
      (->> (str/split src #"\n")
           (map minify-line)
           (apply str)
           (clean-line-breaks))))
#+END_SRC

* Macro definitions

In addition to defining GLSL source code as Clojure strings, the
library also allows to read source from files via the =defglsl-file=
and =glsl-file-spec= macros. For example this spec pulls in the source
from the file =resources/glsl/foo.glsl= in the current project dir.

#+BEGIN_SRC clojure
  (defglsl-file foo [dep1 dep2] "resources/glsl/foo.glsl")
#+END_SRC

#+BEGIN_SRC clojure :noweb yes :tangle ../babel/src/thi/ng/glsl/core.clj :mkdirp yes :padline no
  (ns thi.ng.glsl.core
    (:require
     [clojure.string :as str]))

  <<minify>>

  (defmacro minified
    [src] `~(minify src))

  (defmacro glsl-spec
    [deps src] `{:deps ~deps :src (minified ~src)})

  (defmacro glsl-file-spec
    [deps path] `{:deps ~deps :src (minified ~(slurp path))})

  (defmacro defglsl
    [name deps src]
    `(def ~name (glsl-spec ~deps ~src)))

  (defmacro defglsl-file
    [name deps path]
    `(def ~name (glsl-file-spec ~deps ~path)))
#+END_SRC
